#pragma checksum "/Users/daviderusso1984/Desktop/progetti_nuget/BlazorMaterialize/blazormaterialise/compo/Table/BM_table.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e2b4a8c064e8dc925e14d6ab00230fb81ec84278"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace blazormaterialise
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "/Users/daviderusso1984/Desktop/progetti_nuget/BlazorMaterialize/blazormaterialise/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 2 "/Users/daviderusso1984/Desktop/progetti_nuget/BlazorMaterialize/blazormaterialise/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 3 "/Users/daviderusso1984/Desktop/progetti_nuget/BlazorMaterialize/blazormaterialise/_Imports.razor"
using BlazorInputFile;

#line default
#line hidden
    public partial class BM_table<TableItem> : css_base
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 32 "/Users/daviderusso1984/Desktop/progetti_nuget/BlazorMaterialize/blazormaterialise/compo/Table/BM_table.razor"
      

    [Parameter]
    public RenderFragment TableHeader{get;set;}    
    [Parameter]
    public IEnumerable<TableItem> Items { get; set; }    
    public IEnumerable<TableItem> ItemList { get; set; }


    [Parameter]
    public RenderFragment<TableItem> RowTemplate { get; set; }
    [Parameter]
    public bool Pagination_show{get;set;} = false; 
    [Parameter]
    public int Pagination_divider {get;set;} = 1;

    public int total_page = 0;

    public int currentPage = 0;

    protected override void OnParametersSet(){

    }

    protected override void OnInitialized(){
        
        if(Pagination_show){
            total_page  = Items.Count() / Pagination_divider;
            var div = Items.Count() % Pagination_divider;
            if(div != 0){
                total_page += 1;
            }
            pag_eve(1);
        }else{
            ItemList = Items;
            //await JSRuntime.InvokeAsync<string>("console.log", Items);
           
            this.StateHasChanged();
        }
    }




    private void pag_eve(int item){
        
        currentPage = item;
        ItemList = Items.Skip((currentPage - 1) * Pagination_divider).Take(Pagination_divider);
        this.StateHasChanged();
    }




#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
