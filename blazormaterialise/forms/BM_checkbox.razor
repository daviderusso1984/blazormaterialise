@namespace blazormaterialise


    <label>
        @if (Value)
        {
        @if (Disable)
        {
            <input id="" class="@_class" type="checkbox" checked="checked" @oninput="Change" disabled="disabled" />
        }
        else
        {
            <input id="" class="@_class" type="checkbox" checked="checked" @oninput="Change" />
        }
        }
        else
        {
        @if (Disable)
        {
            <input id="" class="@_class" type="checkbox" @oninput="Change" disabled="disabled" />
        }
        else
        {
            <input id="" class="@_class" type="checkbox" @oninput="Change" />
        }
        }


        <span>@Title</span>
    </label>

    @code{

        [Parameter]
        public string Title{get;set;} = "";

        [Parameter]
        public EventCallback<bool> Onchange{get;set;}
        [Parameter]
        public bool Value{get;set;} = false;
        [Parameter]
        public bool Filled_in{get;set;} = false;
       
        [Parameter]
        public bool Disable{get;set;}= false;
        [Parameter]
        public EventCallback<bool> ValueChanged { get; set; }


        protected Task Change(ChangeEventArgs e)
        {
            Value = (bool)e.Value;
            return ValueChanged.InvokeAsync((bool)e.Value);
        }



        private string _class = "";





        protected override async Task OnAfterRenderAsync(bool firstRender){
            await base.OnAfterRenderAsync(firstRender);
            if(Filled_in && _class==""){
                _class = "filled-in ";
                this.StateHasChanged();
            }


        }


    }