  @namespace blazormaterialise
  @inherits css_base
  @typeparam TableItem
  @inject IJSRuntime JSRuntime;


    <table class=" @Class">
        <thead>
          <tr>
              @TableHeader                       
          </tr>
        </thead>
        <tbody>
            @if (ItemList != null)
            {
                @foreach (var item in ItemList)
                {
                    <tr>@RowTemplate(item)</tr>                    
                }
            }          
        </tbody>
        @if(Pagination_show){
            <tfoot class="">
                <BM_pagination Items="total_page" Items_active="currentPage" Items_click="pag_eve"   ></BM_pagination>
            </tfoot>
        }
      </table>




@code{

    [Parameter]
    public RenderFragment TableHeader{get;set;}    
    [Parameter]
    public IReadOnlyList<TableItem> Items { get; set; }    
    public IEnumerable<TableItem> ItemList { get; set; }
    [Parameter]
    public RenderFragment<TableItem> RowTemplate { get; set; }
    //style
    [Parameter]
    public bool Striped{get;set;}=false;
    [Parameter]
    public bool Highlight{get;set;}=false;
    [Parameter]
    public bool Centered{get;set;}=false;
    [Parameter]
    public bool Responsive_table{get;set;}=false;

    [Parameter]
    public bool Pagination_show{get;set;} = false; 
    [Parameter]
    public int Pagination_divider {get;set;} = 1;

    public int total_page = 0;

    public int currentPage = 0;

    private string dim = "";

    protected override void OnParametersSet(){

    }

    protected override void OnInitialized(){
        dim = "";
        if(Striped){
            dim += "striped ";
        }
        if(Highlight){
            dim += "highlight ";
        }
        if(Centered){
            dim += "centered ";
        }
        if(Responsive_table){
            dim += "responsive-table ";
        }
        if(Pagination_show){
            total_page  = Items.Count() / Pagination_divider;
            var div = Items.Count() % Pagination_divider;
            if(div != 0){
                total_page += 1;
            }
            pag_eve(1);
        }else{
            ItemList = Items;
            //await JSRuntime.InvokeAsync<string>("console.log", Items);
           
            this.StateHasChanged();
        }
    }




    private void pag_eve(int item){
        
        currentPage = item;
        ItemList = Items.Skip((currentPage - 1) * Pagination_divider).Take(Pagination_divider);
        this.StateHasChanged();
    }



}