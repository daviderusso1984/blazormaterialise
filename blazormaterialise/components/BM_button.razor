@namespace blazormaterialise
@inject IJSRuntime JSRuntime;
@inherits css_base

@if (string.IsNullOrWhiteSpace(Href))
{
    <a class="@valor @dim @Class" id="@Id" @attributes="@Attributes" data-target="@Data_target" @onclick="click">
        @ChildContent
    </a>
}
else
{
    <a class="@valor @dim @Class" id="@Id" href="@Href" @attributes="@Attributes" data-target="@Data_target" @onclick="click">
        @ChildContent
    </a>
}


@code{
   

    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public bool Waves_effect { get; set; } = true;
    [Parameter]
    public enum_style_wave Waves_style{get;set;} = enum_style_wave.light;
    [Parameter]
    public bool Disabled { get; set; } = false;
    [Parameter]
    public string Href { get; set; } = "";
    [Parameter]
    public enum_button Type_button { get; set; } = enum_button.Flat;
    [Parameter]
    public EventCallback<MouseEventArgs> Onclick { get; set; }
    [Parameter]
    public Dictionary<string, object> Attributes { get; set; }


    protected async void click(MouseEventArgs ev)
    {
        await Onclick.InvokeAsync(ev);
    }

    private string valor = "";



    private string dim = "";

    protected override void OnInitialized()
    {
        
        if (Type_button == enum_button.Flat)
        {
            if (Waves_effect)
            {
                valor += "waves-effect " + button.get_wave(Waves_style) + " ";
            }
        }
        else
        {
            if (Waves_effect)
            {
                valor += "waves-effect " + button.get_wave(Waves_style) + " ";
            }
        }
        if (Disabled)
        {
            valor += "disabled ";
        }
        
        valor += button.get_button(Type_button);
        dim = "";
        dim += blazormaterialise.show.get_show(Visibility) + " ";
        dim += color.get_backcolor(color.get_color(Backcolor)) + " ";
        dim += color.get_Textcolor(color.get_color(Textcolor)) + " ";
    }
}